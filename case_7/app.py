import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import io

# URL –Ω–∞ Hugging Face
CSV_URL = "https://huggingface.co/datasets/PbI4a/Case_7/resolve/main/case_7/clean_reviews.csv"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Amazon Reviews Analyzer", layout="wide")

@st.cache_data(show_spinner=True)
def load_data_in_chunks(url, chunksize=100000):
    chunks = []
    for chunk in pd.read_csv(url, chunksize=chunksize):
        chunks.append(chunk)
    df = pd.concat(chunks, ignore_index=True)
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.title("üìä Amazon Product Reviews Analysis")
st.markdown("–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤, –º–µ—Ç—Ä–∏–∫ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")

with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
    df = load_data_in_chunks(CSV_URL)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
expected_columns = ["product_title", "star_rating", "review_date", "review_body", "verified_purchase"]
missing_columns = [col for col in expected_columns if col not in df.columns]
if missing_columns:
    st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}")
    st.stop()

# --- –§–∏–ª—å—Ç—Ä—ã
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
product_options = sorted(df["product_title"].dropna().unique().tolist())
selected_products = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç(—ã)", product_options, default=product_options[:3])

rating_options = sorted(df["star_rating"].dropna().unique().astype(int).tolist())
selected_ratings = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥", rating_options, default=rating_options)

verified_only = st.sidebar.checkbox("–¢–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏", value=False)

# --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered_df = df[
    df["product_title"].isin(selected_products) &
    df["star_rating"].isin(selected_ratings)
]

if verified_only:
    filtered_df = filtered_df[filtered_df["verified_purchase"] == "Y"]

st.markdown(f"### üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {len(filtered_df):,}")

# --- –ú–µ—Ç—Ä–∏–∫–∏
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("üìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", round(filtered_df["star_rating"].mean(), 2))
with col2:
    st.metric("üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", f"{len(filtered_df):,}")
with col3:
    percent_verified = 100 * len(filtered_df[filtered_df["verified_purchase"] == "Y"]) / len(filtered_df) if len(filtered_df) > 0 else 0
    st.metric("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏", f"{percent_verified:.1f}%")

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫")
fig_hist = px.histogram(filtered_df, x="star_rating", nbins=5, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥")
st.plotly_chart(fig_hist, use_container_width=True)

# --- Wordcloud
st.subheader("‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤")
text_data = " ".join(filtered_df["review_body"].dropna().astype(str).tolist())

if text_data:
    wordcloud = WordCloud(width=1000, height=400, background_color="white").generate(text_data)
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.imshow(wordcloud, interpolation="bilinear")
    ax.axis("off")
    st.pyplot(fig)
else:
    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤.")

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
st.subheader("üóÇ –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤")
sample_size = min(10, len(filtered_df))
if sample_size > 0:
    st.dataframe(filtered_df[["review_date", "product_title", "star_rating", "review_body"]].sample(sample_size))
else:
    st.warning("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
